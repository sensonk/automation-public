group "com.sz.automation"
version "1.0-SNAPSHOT"

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"

// Application preferences
ext {
    applicationDefaultJvmArgs = ["-Xms2g", "-Xmx2g", "-Xss512k", "-Dfile.encoding=UTF8"]
    autoGroup = "com.qa.automation"
    autoVersion = "1.0-SNAPSHOT"
    javaVersion = 1.8
    encoding = "UTF-8"
    seleniumVersion = "3.141.59"//"3.14.0"
    serenityBddVersion = "2.4.4"
    springVersion = "5.2.11.RELEASE"
    springBootVersion = "2.3.5.RELEASE"
    springBootGradle = "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    serenityBddGradle = "net.serenity-bdd:serenity-gradle-plugin:${serenityBddVersion}"
    exclusion = "exclusions.txt"
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
compileJava.options.encoding = "${encoding}"

gradle.startParameter.continueOnFailure = true

repositories {
    mavenCentral()
    jcenter()
}

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
}

subprojects {
    apply plugin: "java"
    group = "${autoGroup}"
    version = "${autoVersion}"

    configurations { // Support log4j2
        all*.exclude module: "spring-boot-starter-logging"
    }
    dependencies { // Support 'auto-fw-common' level
        compile("autoitx4java:autoitx4java:1")
//        compile("com.jacob:jacob:1.10")
        compile("com.fasterxml.jackson.core:jackson-core:2.11.3")
        compile("com.fasterxml.jackson.core:jackson-databind:2.9.10.6") // ---> update fails the build
//        compile("com.fasterxml.jackson.module:jackson-module-jsonSchema:2.11.3")
        compile("com.flipkart.zjsonpatch:zjsonpatch:0.3.6") // ---> update fails the build
//        compile("com.github.fge:json-patch:1.9") // instead of use >> com.flipkart.zjsonpatch:zjsonpatch
        compile("com.github.2gis.winium:winium-webdriver:0.1.0-1")
        compile("com.github.2gis.winium:winium-elements-desktop:0.2.0-1")
        compile("com.google.guava:guava:29.0-jre")
        compile("com.jcraft:jsch:0.1.55")
        compile("com.microsoft.ews-java-api:ews-java-api:2.0")
        compile("com.paulhammant:ngwebdriver:1.1.6") // Protractor < Selenium
        compile("com.sun.mail:javax.mail:1.6.2")
        compile("commons-fileupload:commons-fileupload:1.4")
        compile("commons-io:commons-io:2.8.0")
        compile("io.rest-assured:rest-assured:4.3.1")
        compile("mysql:mysql-connector-java:8.0.21")
        compile("net.sf.supercsv:super-csv:2.4.0")
        compile("org.apache.commons:commons-lang3:3.11")
        compile("org.apache.logging.log4j:log4j-1.2-api:2.14.1") // Support log4j2
        compile("org.apache.logging.log4j:log4j-core:2.14.1") // Support log4j2
        compile("org.apache.poi:poi-ooxml:4.1.2")
        compile("org.apache.solr:solr-solrj:6.6.1") // ---> update fails the build
        compile("org.assertj:assertj-core:3.17.2")
        compile("org.junit.jupiter:junit-jupiter-api:5.7.0")
        compile("org.projectlombok:lombok:1.18.20")
        annotationProcessor("org.projectlombok:lombok:1.18.20")
        compile("org.seleniumhq.selenium:selenium-java:${seleniumVersion}")
        compile("org.seleniumhq.selenium:selenium-support:${seleniumVersion}")
        compile("org.seleniumhq.selenium:selenium-remote-driver:${seleniumVersion}")
        compile("org.seleniumhq.selenium:selenium-chrome-driver:${seleniumVersion}")
        compile("org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVersion}")
        compile("org.seleniumhq.selenium:selenium-ie-driver:${seleniumVersion}")
        compile("org.seleniumhq.selenium:selenium-htmlunit-driver:2.52.0")
        compile("org.slf4j:slf4j-api:1.7.30")
        compile("org.slf4j:slf4j-log4j12:1.7.30")
//        compile("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//        compile("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        compile("org.springframework.boot:spring-boot-starter:${springBootVersion}") // on "facade:auto-test-gateway"
        compile("org.springframework.boot:spring-boot-starter-log4j2:2.4.3") // Support log4j2
        compile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") // on "facade:auto-test-gateway"
        compile("org.springframework.boot:spring-boot-starter-webflux:2.1.17.RELEASE") // Flux & Mono support
        compile("org.springframework.data:spring-data-commons:2.1.20.RELEASE")
        compile("org.springframework.data:spring-data-jpa:2.1.20.RELEASE")
        compile("org.springframework.hateoas:spring-hateoas:0.25.2.RELEASE")
        compile("org.springframework:spring-beans:${springVersion}")
        compile("org.springframework:spring-context:${springVersion}")
        compile("org.springframework:spring-context-support:${springVersion}")
        compile("org.springframework:spring-core:${springVersion}")
        compile("org.springframework:spring-test:${springVersion}")
        compile("org.springframework:spring-web:${springVersion}")
        compile("org.zeroturnaround:zt-zip:1.14")
        compile("org.samba.jcifs:jcifs:1.3.3") { // MS-connector NTLM support
            exclude group: "javax.servlet", module: "servlet-api"
        }
//        compile files("../../stuff/jars/autoit/AutoItX4Java.jar")
//        compile files("../../stuff/jars/autoit/jacob.jar")
//        compile files("../../stuff/jars/jdk/tools.jar")
//        compile files("../../stuff/jars/jshare/jshare-1.0.1.jar")
//        compile files("../../stuff/jars/testrail/json-simple-1.1.1.jar")
    }
}

test {
    def exclusions = new File("${exclusion}")
    if (exclusions.exists()) {
        exclusions.eachLine {
            line -> exclude line
        }
    }
}